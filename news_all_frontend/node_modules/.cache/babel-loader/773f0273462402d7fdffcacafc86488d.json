{"ast":null,"code":"import { TECH_LIST_REQUEST, TECH_LIST_SUCCESS, TECH_LIST_FAIL, CREATE_TECH_REQUEST, CREATE_TECH_SUCCESS, CREATE_TECH_FAIL } from \"../constants/techConstants\";\nimport axios from \"axios\";\nexport const listTechs = keyword => async dispatch => {\n  try {\n    dispatch({\n      type: TECH_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`http://127.0.0.1:8000/api/technology/list${keyword}`);\n    dispatch({\n      type: TECH_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: TECH_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const createTechs = (category, author, title, description, url, urlToImage, publishedAt, content) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CREATE_TECH_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"http://127.0.0.1:8000/api/technology/create/\", {\n      'author': author,\n      'title': title,\n      'description': description,\n      'url': url,\n      'urlToImage': urlToImage,\n      'publishedAt': publishedAt,\n      'content': content\n    }, config);\n    dispatch({\n      type: CREATE_TECH_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_TECH_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/cos/Desktop/News_Ad_website/backend/news_all/news_all_frontend/src/actions/techActions.js"],"names":["TECH_LIST_REQUEST","TECH_LIST_SUCCESS","TECH_LIST_FAIL","CREATE_TECH_REQUEST","CREATE_TECH_SUCCESS","CREATE_TECH_FAIL","axios","listTechs","keyword","dispatch","type","data","get","payload","error","response","detail","message","createTechs","category","author","title","description","url","urlToImage","publishedAt","content","getState","userLogin","userInfo","config","headers","Authorization","token","post"],"mappings":"AAAA,SACEA,iBADF,EAEEC,iBAFF,EAGEC,cAHF,EAKEC,mBALF,EAMEC,mBANF,EAOEC,gBAPF,QAQO,4BARP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa,MAAOC,QAAP,IAAoB;AACxD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV;AAAR,KAAD,CAAR;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAW,MAAML,KAAK,CAACM,GAAN,CACpB,4CAA2CJ,OAAQ,EAD/B,CAAvB;AAIAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET,iBADC;AAEPY,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,cADC;AAEPW,MAAAA,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CApBM;AAsBP,OAAO,MAAMC,WAAW,GAAE,CACxBC,QADwB,EAExBC,MAFwB,EAGxBC,KAHwB,EAIxBC,WAJwB,EAKxBC,GALwB,EAMxBC,UANwB,EAOxBC,WAPwB,EAQxBC,OARwB,KAQX,OAAOjB,QAAP,EAAiBkB,QAAjB,KAA8B;AAC3C,MAAI;AACFlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AACJyB,MAAAA,SAAS,EAAE;AAACC,QAAAA;AAAD;AADP,QAEDF,QAAQ,EAFb;AAIA,UAAMG,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAEtB,MAAAA;AAAF,QAAW,MAAML,KAAK,CAAC4B,IAAN,CACrB,8CADqB,EAErB;AACE,gBAASd,MADX;AAEE,eAAQC,KAFV;AAGE,qBAAcC,WAHhB;AAIE,aAAOC,GAJT;AAKE,oBAAaC,UALf;AAME,qBAAcC,WANhB;AAOE,iBAAUC;AAPZ,KAFqB,EAWrBI,MAXqB,CAAvB;AAeArB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,mBAAR;AAA6BS,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACD,GA7BD,CA6BE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,gBADC;AAEPQ,MAAAA,OAAO,EACLC,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,MAAtC,GACIF,KAAK,CAACC,QAAN,CAAeJ,IAAf,CAAoBK,MADxB,GAEIF,KAAK,CAACG;AALL,KAAD,CAAR;AAOD;AACF,CA/CM","sourcesContent":["import {\n  TECH_LIST_REQUEST,\n  TECH_LIST_SUCCESS,\n  TECH_LIST_FAIL,\n  \n  CREATE_TECH_REQUEST,\n  CREATE_TECH_SUCCESS,\n  CREATE_TECH_FAIL,\n} from \"../constants/techConstants\";\n\nimport axios from \"axios\";\n\nexport const listTechs = (keyword) => async (dispatch) => {\n  try {\n    dispatch({ type: TECH_LIST_REQUEST });\n    const { data } = await axios.get(\n      `http://127.0.0.1:8000/api/technology/list${keyword}`\n    );\n\n    dispatch({\n      type: TECH_LIST_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: TECH_LIST_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n\nexport const createTechs= (  \n  category,     \n  author,\n  title,\n  description,\n  url,\n  urlToImage,\n  publishedAt,\n  content ) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: CREATE_TECH_REQUEST });\n    const {\n      userLogin: {userInfo}, \n    }  = getState()\n    \n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      },\n    };\n\n    const { data } = await axios.post(\n      \"http://127.0.0.1:8000/api/technology/create/\",\n      {\n        'author':author,\n        'title':title,\n        'description':description,\n        'url': url,\n        'urlToImage':urlToImage,\n        'publishedAt':publishedAt,\n        'content':content,\n      },\n      config\n    );\n\n    \n    dispatch({ type: CREATE_TECH_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: CREATE_TECH_FAIL,\n      payload:\n        error.response && error.response.data.detail\n          ? error.response.data.detail\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}